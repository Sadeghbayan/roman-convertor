[{"/Users/soheil/Sites/roman/src/helper/RomanNumerals.ts":"1","/Users/soheil/Sites/roman/src/App.tsx":"2","/Users/soheil/Sites/roman/src/index.tsx":"3","/Users/soheil/Sites/roman/src/reportWebVitals.ts":"4"},{"size":1874,"mtime":1610956476879,"results":"5","hashOfConfig":"6"},{"size":1244,"mtime":1610955450595,"results":"7","hashOfConfig":"6"},{"size":511,"mtime":1610835527046,"results":"8","hashOfConfig":"6"},{"size":467,"mtime":1610835527006,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1gfb3rg",{"filePath":"12","messages":"13","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/soheil/Sites/roman/src/helper/RomanNumerals.ts",["19","20"],"/Users/soheil/Sites/roman/src/App.tsx",["21"],"import React, { useState } from 'react';\nimport RomanNumerals from './helper/RomanNumerals';\nimport './App.scss';\n\nfunction App() {\n    const [inputToRoman, setToRoman] = useState<string | number>('');\n    const [inputFromRoman, setFromRoman] = useState<string | number>('');\n\n    const roman = new RomanNumerals();\n\n    const handleInputToRoman = (e: React.ChangeEvent<HTMLInputElement>) => {\n        if (e.target.value.length > 4) return;\n        setToRoman(e.target.value);\n        setFromRoman(roman.toRoman(e.target.value));\n    };\n\n    const handleInputfromRoman = (e: { target: { value: string } }) => {\n        setFromRoman(e.target.value);\n        setToRoman(roman.fromRoman(e.target.value));\n    };\n\n    return (\n        <div className=\"App\">\n            <h2>Roman numeral Convertor</h2>\n            <input\n                type=\"text\"\n                value={inputToRoman}\n                onChange={(e) => handleInputToRoman(e)}\n                placeholder=\"Example 1000\"\n            />\n            <input\n                type=\"text\"\n                value={inputFromRoman}\n                onChange={(e) => handleInputfromRoman(e)}\n                placeholder=\"Example MCMXC\"\n            />\n        </div>\n    );\n}\n\nexport default App;\n","/Users/soheil/Sites/roman/src/index.tsx",[],"/Users/soheil/Sites/roman/src/reportWebVitals.ts",["22"],{"ruleId":"23","severity":1,"message":"24","line":3,"column":5,"nodeType":"25","messageId":"26","endLine":3,"endColumn":37},{"ruleId":"23","severity":1,"message":"24","line":35,"column":5,"nodeType":"25","messageId":"26","endLine":35,"endColumn":35},{"ruleId":"23","severity":1,"message":"24","line":5,"column":1,"nodeType":"27","messageId":"26","endLine":5,"endColumn":15},{"ruleId":"23","severity":1,"message":"24","line":3,"column":25,"nodeType":"28","messageId":"26","endLine":3,"endColumn":57},"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","FunctionExpression","missingReturnType","FunctionDeclaration","ArrowFunctionExpression"]